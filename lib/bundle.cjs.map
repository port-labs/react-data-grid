{"version":3,"file":"bundle.cjs","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/style/cell.ts","../src/style/core.ts","../src/style/row.ts","../src/formatters/CheckboxFormatter.tsx","../src/hooks/useLayoutEffect.ts","../src/hooks/useFocusRef.ts","../src/DataGridDefaultComponentsProvider.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/utils/colSpanUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/styleUtils.ts","../src/utils/index.ts","../src/hooks/useCalculatedColumns.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingCellRef.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/HeaderRenderer.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/EditCell.tsx","../src/DragHandle.tsx","../src/SortIcon.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding-block: 0;\n  padding-inline: 8px;\n  border-inline-end: 1px solid var(--rdg-border-color);\n  border-block-end: 1px solid var(--rdg-border-color);\n  grid-row-start: var(--rdg-grid-row-start);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n  outline: none;\n\n  &[aria-selected='true'] {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\n// max-content does not calculate width when contain is set to style or size\nexport const cellAutoResizeClassname = css`\n  .${cell} {\n    contain: content;\n  }\n`;\n\nexport const cellFrozen = css`\n  position: sticky;\n  /* Should have a higher value than 0 to show up above unfrozen cells */\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --rdg-selection-color: #66afe9;\n  --rdg-font-size: 14px;\n\n  display: grid;\n\n  color-scheme: var(--rdg-color-scheme, light dark);\n\n  /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n  /* We set a stacking context so internal elements don't render on top of external components. */\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  block-size: 350px;\n  border: 1px solid var(--rdg-border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--rdg-background-color);\n  color: var(--rdg-color);\n  font-size: var(--rdg-font-size);\n\n  /* set stacking context in safari */\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  /* needed on Firefox */\n  &::before {\n    content: '';\n    grid-column: 1/-1;\n    grid-row: 1/-1;\n  }\n\n  &.rdg-dark {\n    --rdg-color-scheme: dark;\n    ${darkTheme}\n  }\n\n  &.rdg-light {\n    --rdg-color-scheme: light;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  grid-column: 1/-1;\n  pointer-events: none;\n  /* Should have a higher value than 3 to show up above header row */\n  z-index: 4;\n`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  display: contents;\n  line-height: var(--rdg-row-height);\n  background-color: var(--rdg-background-color);\n\n  &:hover {\n    background-color: var(--rdg-row-hover-background-color);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--rdg-row-selected-background-color);\n\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  outline: 2px solid var(--rdg-selection-color);\n  outline-offset: -2px;\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected`;\n\nexport const rowSelectedWithFrozenCell = css`\n  &::before {\n    content: '';\n    display: inline-block;\n    height: 100%;\n    position: sticky;\n    inset-inline-start: 0;\n    border-inline-start: 2px solid var(--rdg-selection-color);\n  }\n`;\n","import { forwardRef } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  inset: 0;\n  margin-inline-end: 1px; /* align checkbox in row group cell */\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  inline-size: 20px;\n  block-size: 20px;\n  border: 2px solid var(--rdg-border-color);\n  background-color: var(--rdg-background-color);\n  .${checkboxInput}:checked + & {\n    background-color: var(--rdg-checkbox-color);\n    outline: 4px solid var(--rdg-background-color);\n    outline-offset: -6px;\n  }\n  .${checkboxInput}:focus + & {\n    border-color: var(--rdg-checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n  .${checkbox} {\n    border-color: var(--rdg-checkbox-disabled-border-color);\n    background-color: var(--rdg-checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport const CheckboxFormatter = forwardRef<HTMLInputElement, CheckboxFormatterProps>(\n  function CheckboxFormatter({ onChange, ...props }: CheckboxFormatterProps, ref) {\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n      onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n    }\n\n    return (\n      <label\n        className={clsx(checkboxLabelClassname, {\n          [checkboxLabelDisabledClassname]: props.disabled\n        })}\n      >\n        <input\n          type=\"checkbox\"\n          ref={ref}\n          {...props}\n          className={checkboxInputClassname}\n          onChange={handleChange}\n        />\n        <div className={checkboxClassname} />\n      </label>\n    );\n  }\n);\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Components, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultComponentsContext = createContext<Maybe<Components<any, any>>>(undefined);\n\nexport const DataGridDefaultComponentsProvider = DataGridDefaultComponentsContext.Provider;\n\nexport function useDefaultComponents<R, SR>(): Maybe<Components<R, SR>> {\n  return useContext(DataGridDefaultComponentsContext);\n}\n","import { useFocusRef } from '../hooks/useFocusRef';\nimport { useDefaultComponents } from '../DataGridDefaultComponentsProvider';\nimport type { CheckboxFormatterProps } from '../types';\n\ntype SharedInputProps = Pick<CheckboxFormatterProps, 'disabled' | 'aria-label' | 'aria-labelledby'>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n  const Formatter = useDefaultComponents()!.checkboxFormatter!;\n\n  return (\n    <Formatter\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      ref={ref}\n      tabIndex={tabIndex}\n      disabled={disabled}\n      checked={value}\n      onChange={onChange}\n    />\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-inline-start: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  summaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'summaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  if (rowIdx === -1) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (summaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: summaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn,\n      'RIGHT_COLUMN_FROZEN_CLASS': column.key === 'FROZEN_RIGHT_COLUMN'\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth > minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { clampColumnWidth, floor, max, min, round } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const { layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        // avoid decimals as subpixel positioning can lead to cell borders not being displayed\n        const unallocatedWidth = viewportWidth - allocatedWidth;\n        const unallocatedColumnWidth = round(unallocatedWidth / unassignedColumnsCount);\n        width = clampColumnWidth(unallocatedColumnWidth, column);\n        allocatedWidth += width;\n        unassignedColumnsCount--;\n        columnMetrics.set(column, { width, left });\n      }\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      gridTemplateColumns: templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor((viewportWidth * parseInt(width, 10)) / 100);\n  }\n  return undefined;\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    function saveDimensions() {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1733042\n      const { clientWidth, clientHeight } = gridRef.current!;\n      // TODO: remove once fixed upstream\n      // we reduce width by 1px here to avoid layout issues in Chrome\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\n      setGridWidth(clientWidth - (devicePixelRatio % 1 === 0 ? 0 : 1));\n      setGridHeight(clientHeight);\n    }\n\n    saveDimensions();\n    const resizeObserver = new ResizeObserver(saveDimensions);\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  const ref = useRef<HTMLDivElement>(null);\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const isChildFocused = useRef(false);\n  const [, forceRender] = useState<unknown>({});\n\n  useLayoutEffect(() => {\n    if (!isSelected) {\n      isChildFocused.current = false;\n      return;\n    }\n\n    if (isChildFocused.current) {\n      // When the child is focused, we need to rerender\n      // the cell again so tabIndex is updated to -1\n      forceRender({});\n      return;\n    }\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== ref.current) {\n      isChildFocused.current = true;\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused.current;\n\n  return {\n    ref,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    if(!viewportColumns.find(i => i.key === 'FROZEN_RIGHT_COLUMN') && columns.find(i => i.key === 'FROZEN_RIGHT_COLUMN')) {\n      viewportColumns.push({...columns[columns.length - 1], cellClass: 'RIGHT_COLUMN_FROZEN_CLASS'});\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { useFocusRef } from './hooks';\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultComponents } from './DataGridDefaultComponentsProvider';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function HeaderRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  isCellSelected\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      isCellSelected={isCellSelected}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: SortableHeaderCellProps<R, SR>) {\n  const SortIcon = useDefaultComponents<R, SR>()!.sortIcon!;\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        <SortIcon sortDirection={sortDirection} />\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport DefaultHeaderRenderer from './HeaderRenderer';\nimport { getCellStyle, getCellClassname, clampColumnWidth } from './utils';\nimport { useRovingCellRef } from './hooks';\nimport { useState } from 'react';\n\nconst cursor = `\nurl(\"data:image/svg+xml,%3Csvg width='20' height='20' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M8.53125 2.07438C8.1875 2.07829 7.91016 2.36344 7.91797 2.70719V17.2931C7.91406 17.5158 8.03125 17.7267 8.22656 17.84C8.42187 17.9533 8.66016 17.9533 8.85547 17.84C9.05078 17.7267 9.16797 17.5158 9.16797 17.2931V2.70719C9.16797 2.53922 9.10156 2.37516 8.98438 2.25797C8.86328 2.13688 8.69922 2.07047 8.53125 2.07438ZM11.4492 2.07438C11.1055 2.07829 10.8281 2.36344 10.832 2.70719V17.2931C10.832 17.5158 10.9492 17.7267 11.1445 17.84C11.3398 17.9533 11.5781 17.9533 11.7734 17.84C11.9688 17.7267 12.0859 17.5158 12.082 17.2931V2.70719C12.0859 2.53922 12.0195 2.37516 11.8984 2.25797C11.7812 2.13688 11.6172 2.07047 11.4492 2.07438ZM3.95312 7.07829C3.69922 7.07829 3.46875 7.23063 3.37109 7.46891C3.27734 7.70329 3.33203 7.97282 3.51562 8.1486L4.94922 9.58219H1.45703C1.23438 9.58219 1.02344 9.69938 0.910156 9.89469C0.796875 10.09 0.796875 10.3283 0.910156 10.5236C1.02344 10.7189 1.23438 10.8361 1.45703 10.8322H4.94922L3.51562 12.2658C3.35156 12.422 3.28906 12.6564 3.34375 12.8752C3.40234 13.0939 3.57422 13.2658 3.79297 13.3205C4.01172 13.3791 4.24219 13.3127 4.39844 13.1486L6.89844 10.6486C7.14453 10.4064 7.14453 10.0119 6.89844 9.76579L4.39844 7.26579C4.28125 7.14469 4.12109 7.07829 3.95312 7.07829ZM16.0312 7.07829C15.8672 7.08219 15.7148 7.1486 15.6016 7.26579L13.1016 9.76579C12.8555 10.0119 12.8555 10.4064 13.1016 10.6486L15.6016 13.1486C15.7578 13.3127 15.9883 13.3791 16.207 13.3205C16.4258 13.2658 16.5977 13.0939 16.6562 12.8752C16.7109 12.6564 16.6484 12.422 16.4844 12.2658L15.0508 10.8322H18.543C18.7656 10.8361 18.9766 10.7189 19.0898 10.5236C19.2031 10.3283 19.2031 10.09 19.0898 9.89469C18.9766 9.69938 18.7656 9.58219 18.543 9.58219H15.0508L16.4844 8.1486C16.668 7.96891 16.7227 7.69547 16.625 7.45719C16.5234 7.22282 16.2852 7.07048 16.0312 7.07829Z' fill='black'/%3E%3C/svg%3E%0A\")\n`\n\nconst cellResizable = css`\n  touch-action: none;\n  &::after {\n    content: '';\n    position: absolute;\n    background: transparent;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 4px;\n  }\n\n  &:active {\n    cursor: ${cursor} 10 10, auto;\n  }\n`;\n\nconst cellResizableHovered = css`\n  touch-action: none;\n  &::after {\n    content: '';\n    background: #3ED0DD;\n    transition: 300ms;\n    cursor: ${cursor} 10 10, auto;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 4px;\n  }\n\n  &:active {\n    cursor: ${cursor} 10 10, auto;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\nconst cellResizableClassnameHovered = `rdg-cell-resizable ${cellResizableHovered}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  onLostResize?: (() => void) | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  onLostResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n    \n  const [resizeHovered, setResizeHovered] = useState(false)\n  \n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable,\n    [cellResizableClassnameHovered]: resizeHovered,\n  });\n  \n  const HeaderRenderer = column.headerRenderer ?? DefaultHeaderRenderer;\n  \n  function onMouseMove(event: React.PointerEvent<HTMLDivElement>) {\n    \n    const { currentTarget } = event;\n    const target = currentTarget.getBoundingClientRect();\n    const x = event.clientX - target.left; //x position within the element.\n    setResizeHovered((currentTarget.offsetWidth - x) < 10 || resizeHovered)\n  }\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      onLostResize?.()\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'auto');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={`${className} ${column.key === 'FROZEN_RIGHT_COLUMN' && 'RIGHT_COLUMN_FROZEN_CLASS'}`}\n      style={{\n        ...getCellStyle(column, colSpan),\n        minWidth: column.minWidth,\n        maxWidth: column.maxWidth ?? undefined\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onMouseMove={onMouseMove}\n      onMouseLeave={() => {\n        setResizeHovered(false)\n      }}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      <HeaderRenderer\n        column={column}\n        sortDirection={sortDirection}\n        priority={priority}\n        onSort={onSort}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        isCellSelected={isCellSelected}\n      />\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn, Direction } from './types';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'auto') => void;\n  onLostResize?: () => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  display: contents;\n  line-height: var(--rdg-header-row-height);\n  background-color: var(--rdg-header-background-color);\n  font-weight: bold;\n\n  > .${cell} {\n    /* Should have a higher value than 1 to show up above frozen cells */\n    z-index: 2;\n    position: sticky;\n    inset-block-start: 0;\n  }\n\n  > .${cellFrozen} {\n    z-index: 3;\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  onLostResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onLostResize={onLostResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    // selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            row={row}\n            isCellSelected={isCellSelected}\n            onRowChange={onRowChange}\n          />\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((newRow: R) => {\n    onRowChange(rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          row={row}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--rdg-header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-inline-end: none;\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  inset-block-start: var(--rdg-summary-row-top);\n  inset-block-end: var(--rdg-summary-row-bottom);\n`;\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {SummaryFormatter && (\n        <SummaryFormatter column={column} row={row} isCellSelected={isCellSelected} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, row, rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  &.${row} {\n    line-height: var(--rdg-summary-row-height);\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst summaryRowBorderClassname = css`\n  & > .${cell} {\n    border-block-start: 2px solid var(--rdg-summary-border-color);\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [summaryRowBorderClassname]: rowIdx === 0,\n          [rowSelectedClassname]: selectedCellIdx === -1\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation } from './utils';\nimport type { CellRendererProps, EditorProps, Omit } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  &.rdg-cell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  closeEditor: () => void;\n  scrollToCell: () => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  closeEditor,\n  scrollToCell\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n      scrollToCell();\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          <column.editor column={column} row={row} onRowChange={onRowChange} onClose={onClose} />\n          {column.editorOptions?.renderFormatter && (\n            <column.formatter column={column} row={row} isCellSelected onRowChange={onRowChange} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  inset-inline-end: 0;\n  inset-block-end: 0;\n  inline-size: 8px;\n  block-size: 8px;\n  background-color: var(--rdg-selection-color);\n\n  &:hover {\n    inline-size: 16px;\n    block-size: 16px;\n    border: 2px solid var(--rdg-selection-color);\n    background-color: var(--rdg-background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { css } from '@linaria/core';\nimport type { SortIconProps } from './types';\n\nconst arrow = css`\n  fill: currentColor;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function SortIcon({ sortDirection }: SortIconProps) {\n  return sortDirection !== undefined ? (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  ) : null;\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  focusSinkClassname,\n  cellAutoResizeClassname,\n  rowSelected,\n  rowSelectedWithFrozenCell\n} from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport SortIcon from './SortIcon';\nimport { CheckboxFormatter } from './formatters';\nimport {\n  DataGridDefaultComponentsProvider,\n  useDefaultComponents\n} from './DataGridDefaultComponentsProvider';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  sign,\n  abs,\n  getSelectedCellColSpan\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Components,\n  Direction\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  components?: Maybe<Components<R, SR>>;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    components,\n    className,\n    style,\n    rowClass,\n    direction,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  const defaultComponents = useDefaultComponents<R, SR>();\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const RowRenderer = components?.rowRenderer ?? defaultComponents?.rowRenderer ?? Row;\n  const sortIcon = components?.sortIcon ?? defaultComponents?.sortIcon ?? SortIcon;\n  const checkboxFormatter =\n    components?.checkboxFormatter ?? defaultComponents?.checkboxFormatter ?? CheckboxFormatter;\n  const noRowsFallback = components?.noRowsFallback ?? defaultComponents?.noRowsFallback;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n  direction ??= 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [autoResizeColumn, setAutoResizeColumn] = useState<CalculatedColumn<R, SR> | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isHeaderRowSelected = selectedPosition.rowIdx === -1;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortIcon,\n      checkboxFormatter\n    }),\n    [sortIcon, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1; // change it to 0?\n  const maxRowIdx = headerRowsCount + rows.length + summaryRowsCount - 2;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: -1, idx });\n  });\n  const selectSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = summaryRows!.indexOf(summaryRow) + headerRowsCount + rows.length - 1;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (autoResizeColumn === null) return;\n    const columnElement = gridRef.current!.querySelector(\n      `[aria-colindex=\"${autoResizeColumn.idx + 1}\"]`\n    )!;\n\n    const { width } = columnElement.getBoundingClientRect();\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(autoResizeColumn.key, width);\n      return newColumnWidths;\n    });\n    setAutoResizeColumn(null);\n    \n    onColumnResize?.(autoResizeColumn.idx, width);\n  }, [autoResizeColumn, gridRef, onColumnResize]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback((column: CalculatedColumn<R, SR>, width: number | 'auto') => {\n      if (width === 'auto') {\n        setAutoResizeColumn(column);\n        return;\n      }\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      // document.body.style.cursor = cursor;\n      gridRef.current!.querySelectorAll<HTMLElement>(`[role=\"gridcell\"][aria-colindex=\"${column.idx + 1}\"]`).forEach((el) => {\n          el.style.borderRightColor = \"#D3D3D3\";\n          el.style.borderRightWidth = \"4px\";\n          el.style.borderRightStyle = \"solid\";\n          el.style.transition = \"border 300ms\";\n      });\n      \n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const onLostResize = () => {\n      gridRef.current!.querySelectorAll<HTMLElement>(`[role=\"gridcell\"]`).forEach((el) => {\n          el.style.borderRightColor = \"transparent\";\n      });\n  }\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === leftKey && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === rightKey && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    // scrollLeft is nagative when direction is rtl\n    setScrollLeft(abs(scrollLeft));\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      // TODO: replace with a #record? https://github.com/microsoft/TypeScript/issues/39831\n      scrollToCell(position);\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      const sign = isRtl ? -1 : 1;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth) * sign;\n      }\n    }\n\n    if (typeof rowIdx === 'number' && isRowIdxWithinViewportBounds(rowIdx)) {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n      if (rowTop < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      summaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (autoResizeColumn === null) return layoutCssVars;\n    const { gridTemplateColumns } = layoutCssVars;\n    const newSizes = gridTemplateColumns.split(' ');\n    newSizes[autoResizeColumn.idx] = 'max-content';\n    return {\n      ...layoutCssVars,\n      gridTemplateColumns: newSizes.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        updateRow(selectedPosition.rowIdx, row);\n        closeEditor();\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        scrollToCell={() => {\n          scrollToCell(selectedPosition);\n        }}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={rowColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          rowClass={rowClass}\n          gridRowStart={gridRowStart}\n          height={getRowHeight(rowIdx)}\n          copiedCellIdx={\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          }\n          selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          onRowChange={handleFormatterRowChangeLatest}\n          selectCell={selectViewportCellLatest}\n          selectedCellDragHandle={getDragHandle(rowIdx)}\n          selectedCellEditor={getCellEditor(rowIdx)}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (summaryRowsCount > 0) {\n    templateRows += ` repeat(${summaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== -2;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging,\n          [cellAutoResizeClassname]: autoResizeColumn !== null\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...getLayoutCssVars()\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + 2\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      <DataGridDefaultComponentsProvider value={defaultGridComponents}>\n        <HeaderRow\n          columns={getRowViewportColumns(-1)}\n          onColumnResize={handleColumnResize}\n          onLostResize={onLostResize}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={selectAllRowsLatest}\n          sortColumns={sortColumns}\n          onSortColumnsChange={onSortColumnsChange}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          selectedCellIdx={isHeaderRowSelected ? selectedPosition.idx : undefined}\n          selectCell={selectHeaderCellLatest}\n          shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n          direction={direction}\n        />\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {summaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = headerRowsCount + rows.length + rowIdx - 1;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (summaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (summaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectSummaryCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n      </DataGridDefaultComponentsProvider>\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  inline-size: 100%;\n  block-size: 100%;\n  padding-block: 0;\n  padding-inline: 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--rdg-color);\n  background-color: var(--rdg-background-color);\n\n  font-family: inherit;\n  font-size: var(--rdg-font-size);\n\n  &:focus {\n    border-color: var(--rdg-selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellAutoResizeClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","row","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","CheckboxFormatter","forwardRef","onChange","props","CheckboxFormatterProps","ref","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","className","clsx","disabled","children","_jsx","type","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","useRef","current","focus","preventScroll","tabIndex","DataGridDefaultComponentsContext","createContext","undefined","DataGridDefaultComponentsProvider","Provider","useDefaultComponents","useContext","SelectCellFormatter","value","isCellSelected","ariaLabel","ariaLabelledBy","Formatter","checkboxFormatter","ValueFormatter","_Fragment","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","width","height","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","Error","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","isShiftClick","SelectGroupFormatter","SelectColumn","name","minWidth","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","idx","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","event","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","summaryRows","length","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","getRowStyle","getCellStyle","gridColumnStart","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","isLastFrozenColumn","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","clampColumnWidth","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","map","rawColumn","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","set","columnMetric","get","unallocatedWidth","unallocatedColumnWidth","gridTemplateColumns","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","test","parseInt","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","ResizeObserver","saveDimensions","clientWidth","clientHeight","devicePixelRatio","resizeObserver","observe","disconnect","useLatestFunc","fn","useCallback","useRovingCellRef","isChildFocused","forceRender","onFocus","isFocused","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","viewportColumns","find","cellClass","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","entries","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","HeaderRenderer","sortDirection","priority","onSort","SortableHeaderCell","SortIcon","sortIcon","preventDefault","handleClick","onClick","cellResizable","cellResizableHovered","cellResizableClassname","cellResizableClassnameHovered","HeaderCell","onColumnResize","onLostResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","columnKey","sortColumn","ariaSort","resizeHovered","setResizeHovered","headerCellClass","DefaultHeaderRenderer","onMouseMove","currentTarget","getBoundingClientRect","x","clientX","offsetWidth","onPointerDown","pointerType","buttons","pointerId","right","onPointerMove","onLostPointerCapture","removeEventListener","setPointerCapture","addEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","onDoubleClick","handleFocus","role","style","onMouseLeave","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","selectCellWrapper","openEditor","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","onContextMenu","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","handleRowChange","newRow","handleDragEnter","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","groupRowClassname","GroupedRow","selectGroup","handleSelectGroup","summaryCellClassname","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","summaryRow","summaryRowBorderClassname","summaryRowClassname","SummaryRow","bottom","ariaRowIndex","cellEditing","EditCell","closeEditor","scrollToCell","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","stopPropagation","onNavigation","commitChanges","renderFormatter","onMouseDownCapture","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","onMouseDown","arrow","arrowClassname","initialPosition","mode","DataGrid","rowKeyGetter","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onScroll","onCopy","onPaste","rawCellNavigationMode","components","ariaDescribedBy","testId","defaultComponents","RowRenderer","rowRenderer","noRowsFallback","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","autoResizeColumn","setAutoResizeColumn","prevSelectedPosition","lastSelectedRowIdx","rowRef","headerRowsCount","summaryRowsCount","isSelectable","isHeaderRowSelected","leftKey","rightKey","defaultGridComponents","size","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectSummaryCellLatest","toggleGroupLatest","isSamePosition","columnElement","querySelector","newColumnWidths","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","querySelectorAll","el","borderRightColor","borderRightWidth","borderRightStyle","transition","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","isRowIdxWithinViewportBounds","navigate","handleCellInput","handleScroll","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","updatedTargetRow","targetColumnKey","onCellKeyDown","isDefaultPrevented","originalRow","isColIdxWithinSelectionBounds","isCellAtLeftBoundary","isCellAtRightBoundary","rowTop","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getLayoutCssVars","newSizes","split","join","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","GroupRowRenderer","c","templateRows","isGroupRowFocused","dir","summaryRowIdx","isSummaryRowSelected","p1","p2","textEditor","textEditorClassname","autoFocusAndSelect","input","select","TextEditor","onBlur"],"mappings":"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"}